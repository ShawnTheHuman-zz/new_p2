
Terminals unused in grammar

    SEMICOLON


Grammar

    0 $accept: program $end

    1 program: start vars main block stop

    2 block: RBRACE vars stats LBRACE

    3 vars: %empty
    4     | let ID COLON NUMBER vars

    5 expr: N DIV expr
    6     | N MULT expr
    7     | N

    8 N: A PLUS N
    9  | A MINUS N
   10  | A

   11 A: MOD A
   12  | R

   13 R: LBRACK expr RBRACK
   14  | ID
   15  | NUMBER

   16 stats: stat mStat

   17 mStat: %empty
   18      | stat mStat

   19 stat: in DOT
   20     | out DOT
   21     | block
   22     | if_stat DOT
   23     | loop DOT
   24     | assign DOT

   25 in: scanf LBRACK ID RBRACK

   26 out: printf LBRACK expr RBRACK

   27 if_stat: if LBRACK expr RO expr RBRACK then block

   28 loop: iter LBRACK expr RO expr RBRACK block

   29 assign: ID ASSIGNS expr

   30 RO: LE
   31   | GE
   32   | EQUAL
   33   | COLON COLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SEMICOLON (258)
    GE (259) 31
    LE (260) 30
    EQUAL (261) 32
    COLON (262) 4 33
    RBRACK (263) 13 25 26 27 28
    LBRACK (264) 13 25 26 27 28
    ASSIGNS (265) 29
    DOT (266) 19 20 22 23 24
    MOD (267) 11
    PLUS (268) 8
    MINUS (269) 9
    DIV (270) 5
    MULT (271) 6
    RBRACE (272) 2
    LBRACE (273) 2
    start (274) 1
    main (275) 1
    stop (276) 1
    let (277) 4
    scanf (278) 25
    printf (279) 26
    if (280) 27
    iter (281) 28
    then (282) 27
    ID (283) 4 14 25 29
    NUMBER (284) 4 15


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    program (31)
        on left: 1
        on right: 0
    block (32)
        on left: 2
        on right: 1 21 27 28
    vars (33)
        on left: 3 4
        on right: 1 2 4
    expr (34)
        on left: 5 6 7
        on right: 5 6 13 26 27 28 29
    N (35)
        on left: 8 9 10
        on right: 5 6 7 8 9
    A (36)
        on left: 11 12
        on right: 8 9 10 11
    R (37)
        on left: 13 14 15
        on right: 12
    stats (38)
        on left: 16
        on right: 2
    mStat (39)
        on left: 17 18
        on right: 16 18
    stat (40)
        on left: 19 20 21 22 23 24
        on right: 16 18
    in (41)
        on left: 25
        on right: 19
    out (42)
        on left: 26
        on right: 20
    if_stat (43)
        on left: 27
        on right: 22
    loop (44)
        on left: 28
        on right: 23
    assign (45)
        on left: 29
        on right: 24
    RO (46)
        on left: 30 31 32 33
        on right: 27 28


State 0

    0 $accept: . program $end

    start  shift, and go to state 1

    program  go to state 2


State 1

    1 program: start . vars main block stop

    let  shift, and go to state 3

    $default  reduce using rule 3 (vars)

    vars  go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    4 vars: let . ID COLON NUMBER vars

    ID  shift, and go to state 6


State 4

    1 program: start vars . main block stop

    main  shift, and go to state 7


State 5

    0 $accept: program $end .

    $default  accept


State 6

    4 vars: let ID . COLON NUMBER vars

    COLON  shift, and go to state 8


State 7

    1 program: start vars main . block stop

    RBRACE  shift, and go to state 9

    block  go to state 10


State 8

    4 vars: let ID COLON . NUMBER vars

    NUMBER  shift, and go to state 11


State 9

    2 block: RBRACE . vars stats LBRACE

    let  shift, and go to state 3

    $default  reduce using rule 3 (vars)

    vars  go to state 12


State 10

    1 program: start vars main block . stop

    stop  shift, and go to state 13


State 11

    4 vars: let ID COLON NUMBER . vars

    let  shift, and go to state 3

    $default  reduce using rule 3 (vars)

    vars  go to state 14


State 12

    2 block: RBRACE vars . stats LBRACE

    RBRACE  shift, and go to state 9
    scanf   shift, and go to state 15
    printf  shift, and go to state 16
    if      shift, and go to state 17
    iter    shift, and go to state 18
    ID      shift, and go to state 19

    block    go to state 20
    stats    go to state 21
    stat     go to state 22
    in       go to state 23
    out      go to state 24
    if_stat  go to state 25
    loop     go to state 26
    assign   go to state 27


State 13

    1 program: start vars main block stop .

    $default  reduce using rule 1 (program)


State 14

    4 vars: let ID COLON NUMBER vars .

    $default  reduce using rule 4 (vars)


State 15

   25 in: scanf . LBRACK ID RBRACK

    LBRACK  shift, and go to state 28


State 16

   26 out: printf . LBRACK expr RBRACK

    LBRACK  shift, and go to state 29


State 17

   27 if_stat: if . LBRACK expr RO expr RBRACK then block

    LBRACK  shift, and go to state 30


State 18

   28 loop: iter . LBRACK expr RO expr RBRACK block

    LBRACK  shift, and go to state 31


State 19

   29 assign: ID . ASSIGNS expr

    ASSIGNS  shift, and go to state 32


State 20

   21 stat: block .

    $default  reduce using rule 21 (stat)


State 21

    2 block: RBRACE vars stats . LBRACE

    LBRACE  shift, and go to state 33


State 22

   16 stats: stat . mStat

    RBRACE  shift, and go to state 9
    scanf   shift, and go to state 15
    printf  shift, and go to state 16
    if      shift, and go to state 17
    iter    shift, and go to state 18
    ID      shift, and go to state 19

    $default  reduce using rule 17 (mStat)

    block    go to state 20
    mStat    go to state 34
    stat     go to state 35
    in       go to state 23
    out      go to state 24
    if_stat  go to state 25
    loop     go to state 26
    assign   go to state 27


State 23

   19 stat: in . DOT

    DOT  shift, and go to state 36


State 24

   20 stat: out . DOT

    DOT  shift, and go to state 37


State 25

   22 stat: if_stat . DOT

    DOT  shift, and go to state 38


State 26

   23 stat: loop . DOT

    DOT  shift, and go to state 39


State 27

   24 stat: assign . DOT

    DOT  shift, and go to state 40


State 28

   25 in: scanf LBRACK . ID RBRACK

    ID  shift, and go to state 41


State 29

   26 out: printf LBRACK . expr RBRACK

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    expr  go to state 46
    N     go to state 47
    A     go to state 48
    R     go to state 49


State 30

   27 if_stat: if LBRACK . expr RO expr RBRACK then block

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    expr  go to state 50
    N     go to state 47
    A     go to state 48
    R     go to state 49


State 31

   28 loop: iter LBRACK . expr RO expr RBRACK block

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    expr  go to state 51
    N     go to state 47
    A     go to state 48
    R     go to state 49


State 32

   29 assign: ID ASSIGNS . expr

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    expr  go to state 52
    N     go to state 47
    A     go to state 48
    R     go to state 49


State 33

    2 block: RBRACE vars stats LBRACE .

    $default  reduce using rule 2 (block)


State 34

   16 stats: stat mStat .

    $default  reduce using rule 16 (stats)


State 35

   18 mStat: stat . mStat

    RBRACE  shift, and go to state 9
    scanf   shift, and go to state 15
    printf  shift, and go to state 16
    if      shift, and go to state 17
    iter    shift, and go to state 18
    ID      shift, and go to state 19

    $default  reduce using rule 17 (mStat)

    block    go to state 20
    mStat    go to state 53
    stat     go to state 35
    in       go to state 23
    out      go to state 24
    if_stat  go to state 25
    loop     go to state 26
    assign   go to state 27


State 36

   19 stat: in DOT .

    $default  reduce using rule 19 (stat)


State 37

   20 stat: out DOT .

    $default  reduce using rule 20 (stat)


State 38

   22 stat: if_stat DOT .

    $default  reduce using rule 22 (stat)


State 39

   23 stat: loop DOT .

    $default  reduce using rule 23 (stat)


State 40

   24 stat: assign DOT .

    $default  reduce using rule 24 (stat)


State 41

   25 in: scanf LBRACK ID . RBRACK

    RBRACK  shift, and go to state 54


State 42

   13 R: LBRACK . expr RBRACK

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    expr  go to state 55
    N     go to state 47
    A     go to state 48
    R     go to state 49


State 43

   11 A: MOD . A

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    A  go to state 56
    R  go to state 49


State 44

   14 R: ID .

    $default  reduce using rule 14 (R)


State 45

   15 R: NUMBER .

    $default  reduce using rule 15 (R)


State 46

   26 out: printf LBRACK expr . RBRACK

    RBRACK  shift, and go to state 57


State 47

    5 expr: N . DIV expr
    6     | N . MULT expr
    7     | N .

    DIV   shift, and go to state 58
    MULT  shift, and go to state 59

    $default  reduce using rule 7 (expr)


State 48

    8 N: A . PLUS N
    9  | A . MINUS N
   10  | A .

    PLUS   shift, and go to state 60
    MINUS  shift, and go to state 61

    $default  reduce using rule 10 (N)


State 49

   12 A: R .

    $default  reduce using rule 12 (A)


State 50

   27 if_stat: if LBRACK expr . RO expr RBRACK then block

    GE     shift, and go to state 62
    LE     shift, and go to state 63
    EQUAL  shift, and go to state 64
    COLON  shift, and go to state 65

    RO  go to state 66


State 51

   28 loop: iter LBRACK expr . RO expr RBRACK block

    GE     shift, and go to state 62
    LE     shift, and go to state 63
    EQUAL  shift, and go to state 64
    COLON  shift, and go to state 65

    RO  go to state 67


State 52

   29 assign: ID ASSIGNS expr .

    $default  reduce using rule 29 (assign)


State 53

   18 mStat: stat mStat .

    $default  reduce using rule 18 (mStat)


State 54

   25 in: scanf LBRACK ID RBRACK .

    $default  reduce using rule 25 (in)


State 55

   13 R: LBRACK expr . RBRACK

    RBRACK  shift, and go to state 68


State 56

   11 A: MOD A .

    $default  reduce using rule 11 (A)


State 57

   26 out: printf LBRACK expr RBRACK .

    $default  reduce using rule 26 (out)


State 58

    5 expr: N DIV . expr

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    expr  go to state 69
    N     go to state 47
    A     go to state 48
    R     go to state 49


State 59

    6 expr: N MULT . expr

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    expr  go to state 70
    N     go to state 47
    A     go to state 48
    R     go to state 49


State 60

    8 N: A PLUS . N

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    N  go to state 71
    A  go to state 48
    R  go to state 49


State 61

    9 N: A MINUS . N

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    N  go to state 72
    A  go to state 48
    R  go to state 49


State 62

   31 RO: GE .

    $default  reduce using rule 31 (RO)


State 63

   30 RO: LE .

    $default  reduce using rule 30 (RO)


State 64

   32 RO: EQUAL .

    $default  reduce using rule 32 (RO)


State 65

   33 RO: COLON . COLON

    COLON  shift, and go to state 73


State 66

   27 if_stat: if LBRACK expr RO . expr RBRACK then block

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    expr  go to state 74
    N     go to state 47
    A     go to state 48
    R     go to state 49


State 67

   28 loop: iter LBRACK expr RO . expr RBRACK block

    LBRACK  shift, and go to state 42
    MOD     shift, and go to state 43
    ID      shift, and go to state 44
    NUMBER  shift, and go to state 45

    expr  go to state 75
    N     go to state 47
    A     go to state 48
    R     go to state 49


State 68

   13 R: LBRACK expr RBRACK .

    $default  reduce using rule 13 (R)


State 69

    5 expr: N DIV expr .

    $default  reduce using rule 5 (expr)


State 70

    6 expr: N MULT expr .

    $default  reduce using rule 6 (expr)


State 71

    8 N: A PLUS N .

    $default  reduce using rule 8 (N)


State 72

    9 N: A MINUS N .

    $default  reduce using rule 9 (N)


State 73

   33 RO: COLON COLON .

    $default  reduce using rule 33 (RO)


State 74

   27 if_stat: if LBRACK expr RO expr . RBRACK then block

    RBRACK  shift, and go to state 76


State 75

   28 loop: iter LBRACK expr RO expr . RBRACK block

    RBRACK  shift, and go to state 77


State 76

   27 if_stat: if LBRACK expr RO expr RBRACK . then block

    then  shift, and go to state 78


State 77

   28 loop: iter LBRACK expr RO expr RBRACK . block

    RBRACE  shift, and go to state 9

    block  go to state 79


State 78

   27 if_stat: if LBRACK expr RO expr RBRACK then . block

    RBRACE  shift, and go to state 9

    block  go to state 80


State 79

   28 loop: iter LBRACK expr RO expr RBRACK block .

    $default  reduce using rule 28 (loop)


State 80

   27 if_stat: if LBRACK expr RO expr RBRACK then block .

    $default  reduce using rule 27 (if_stat)
