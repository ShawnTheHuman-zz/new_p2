Nonterminals useless in grammar

    type
    VAR


Terminals unused in grammar

    SEMICOLON
    LPAREN
    RPAREN
    COMMENT
    COMMA
    FUNC
    ADD
    SUB


Grammar

    0 $accept: program $end

    1 program: START vars MAIN block STOP

    2 block: RBRACE vars stats LBRACE

    3 vars: %empty
    4     | LET expr COLON NUMBER vars

    5 expr: N DIV expr
    6     | N MULT expr
    7     | N

    8 N: A PLUS N
    9  | A MINUS N
   10  | A

   11 A: MOD A
   12  | R

   13 R: LBRACK expr RBRACK
   14  | ID
   15  | NUMBER

   16 stats: stat mStat

   17 mStat: %empty
   18      | stat mStat

   19 stat: in DOT
   20     | out DOT
   21     | block
   22     | if_stat DOT
   23     | loop DOT
   24     | assign DOT

   25 in: SCANF LBRACK ID RBRACK

   26 out: PRINTF LBRACK expr RBRACK

   27 if_stat: IF LBRACK expr RO expr RBRACK THEN block

   28 loop: ITER LBRACK expr RO expr RBRACK block

   29 assign: ID ASSIGNS expr

   30 RO: LE
   31   | GE
   32   | EQUAL
   33   | COLON COLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SEMICOLON (258)
    GE (259) 31
    LE (260) 30
    EQUAL (261) 32
    COLON (262) 4 33
    RBRACK (263) 13 25 26 27 28
    LBRACK (264) 13 25 26 27 28
    ASSIGNS (265) 29
    LPAREN (266)
    RPAREN (267)
    COMMENT (268)
    DOT (269) 19 20 22 23 24
    MOD (270) 11
    PLUS (271) 8
    MINUS (272) 9
    DIV (273) 5
    MULT (274) 6
    RBRACE (275) 2
    LBRACE (276) 2
    START (277) 1
    MAIN (278) 1
    STOP (279) 1
    LET (280) 4
    COMMA (281)
    SCANF (282) 25
    PRINTF (283) 26
    IF (284) 27
    ITER (285) 28
    THEN (286) 27
    FUNC (287)
    ADD (288)
    SUB (289)
    NUMBER <iVal> (290) 4 15
    ID <iVal> (291) 14 25 29


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program <tVal> (38)
        on left: 1
        on right: 0
    block <tVal> (39)
        on left: 2
        on right: 1 21 27 28
    vars <tVal> (40)
        on left: 3 4
        on right: 1 2 4
    expr <tVal> (41)
        on left: 5 6 7
        on right: 4 5 6 13 26 27 28 29
    N <tVal> (42)
        on left: 8 9 10
        on right: 5 6 7 8 9
    A <tVal> (43)
        on left: 11 12
        on right: 8 9 10 11
    R <tVal> (44)
        on left: 13 14 15
        on right: 12
    stats <tVal> (45)
        on left: 16
        on right: 2
    mStat <tVal> (46)
        on left: 17 18
        on right: 16 18
    stat <tVal> (47)
        on left: 19 20 21 22 23 24
        on right: 16 18
    in <tVal> (48)
        on left: 25
        on right: 19
    out <tVal> (49)
        on left: 26
        on right: 20
    if_stat <tVal> (50)
        on left: 27
        on right: 22
    loop <tVal> (51)
        on left: 28
        on right: 23
    assign <tVal> (52)
        on left: 29
        on right: 24
    RO <tVal> (53)
        on left: 30 31 32 33
        on right: 27 28


State 0

    0 $accept: . program $end

    START  shift, and go to state 1

    program  go to state 2


State 1

    1 program: START . vars MAIN block STOP

    LET  shift, and go to state 3

    $default  reduce using rule 3 (vars)

    vars  go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    4 vars: LET . expr COLON NUMBER vars

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    expr  go to state 10
    N     go to state 11
    A     go to state 12
    R     go to state 13


State 4

    1 program: START vars . MAIN block STOP

    MAIN  shift, and go to state 14


State 5

    0 $accept: program $end .

    $default  accept


State 6

   13 R: LBRACK . expr RBRACK

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    expr  go to state 15
    N     go to state 11
    A     go to state 12
    R     go to state 13


State 7

   11 A: MOD . A

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    A  go to state 16
    R  go to state 13


State 8

   15 R: NUMBER .

    $default  reduce using rule 15 (R)


State 9

   14 R: ID .

    $default  reduce using rule 14 (R)


State 10

    4 vars: LET expr . COLON NUMBER vars

    COLON  shift, and go to state 17


State 11

    5 expr: N . DIV expr
    6     | N . MULT expr
    7     | N .

    DIV   shift, and go to state 18
    MULT  shift, and go to state 19

    $default  reduce using rule 7 (expr)


State 12

    8 N: A . PLUS N
    9  | A . MINUS N
   10  | A .

    PLUS   shift, and go to state 20
    MINUS  shift, and go to state 21

    $default  reduce using rule 10 (N)


State 13

   12 A: R .

    $default  reduce using rule 12 (A)


State 14

    1 program: START vars MAIN . block STOP

    RBRACE  shift, and go to state 22

    block  go to state 23


State 15

   13 R: LBRACK expr . RBRACK

    RBRACK  shift, and go to state 24


State 16

   11 A: MOD A .

    $default  reduce using rule 11 (A)


State 17

    4 vars: LET expr COLON . NUMBER vars

    NUMBER  shift, and go to state 25


State 18

    5 expr: N DIV . expr

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    expr  go to state 26
    N     go to state 11
    A     go to state 12
    R     go to state 13


State 19

    6 expr: N MULT . expr

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    expr  go to state 27
    N     go to state 11
    A     go to state 12
    R     go to state 13


State 20

    8 N: A PLUS . N

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    N  go to state 28
    A  go to state 12
    R  go to state 13


State 21

    9 N: A MINUS . N

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    N  go to state 29
    A  go to state 12
    R  go to state 13


State 22

    2 block: RBRACE . vars stats LBRACE

    LET  shift, and go to state 3

    $default  reduce using rule 3 (vars)

    vars  go to state 30


State 23

    1 program: START vars MAIN block . STOP

    STOP  shift, and go to state 31


State 24

   13 R: LBRACK expr RBRACK .

    $default  reduce using rule 13 (R)


State 25

    4 vars: LET expr COLON NUMBER . vars

    LET  shift, and go to state 3

    $default  reduce using rule 3 (vars)

    vars  go to state 32


State 26

    5 expr: N DIV expr .

    $default  reduce using rule 5 (expr)


State 27

    6 expr: N MULT expr .

    $default  reduce using rule 6 (expr)


State 28

    8 N: A PLUS N .

    $default  reduce using rule 8 (N)


State 29

    9 N: A MINUS N .

    $default  reduce using rule 9 (N)


State 30

    2 block: RBRACE vars . stats LBRACE

    RBRACE  shift, and go to state 22
    SCANF   shift, and go to state 33
    PRINTF  shift, and go to state 34
    IF      shift, and go to state 35
    ITER    shift, and go to state 36
    ID      shift, and go to state 37

    block    go to state 38
    stats    go to state 39
    stat     go to state 40
    in       go to state 41
    out      go to state 42
    if_stat  go to state 43
    loop     go to state 44
    assign   go to state 45


State 31

    1 program: START vars MAIN block STOP .

    $default  reduce using rule 1 (program)


State 32

    4 vars: LET expr COLON NUMBER vars .

    $default  reduce using rule 4 (vars)


State 33

   25 in: SCANF . LBRACK ID RBRACK

    LBRACK  shift, and go to state 46


State 34

   26 out: PRINTF . LBRACK expr RBRACK

    LBRACK  shift, and go to state 47


State 35

   27 if_stat: IF . LBRACK expr RO expr RBRACK THEN block

    LBRACK  shift, and go to state 48


State 36

   28 loop: ITER . LBRACK expr RO expr RBRACK block

    LBRACK  shift, and go to state 49


State 37

   29 assign: ID . ASSIGNS expr

    ASSIGNS  shift, and go to state 50


State 38

   21 stat: block .

    $default  reduce using rule 21 (stat)


State 39

    2 block: RBRACE vars stats . LBRACE

    LBRACE  shift, and go to state 51


State 40

   16 stats: stat . mStat

    RBRACE  shift, and go to state 22
    SCANF   shift, and go to state 33
    PRINTF  shift, and go to state 34
    IF      shift, and go to state 35
    ITER    shift, and go to state 36
    ID      shift, and go to state 37

    $default  reduce using rule 17 (mStat)

    block    go to state 38
    mStat    go to state 52
    stat     go to state 53
    in       go to state 41
    out      go to state 42
    if_stat  go to state 43
    loop     go to state 44
    assign   go to state 45


State 41

   19 stat: in . DOT

    DOT  shift, and go to state 54


State 42

   20 stat: out . DOT

    DOT  shift, and go to state 55


State 43

   22 stat: if_stat . DOT

    DOT  shift, and go to state 56


State 44

   23 stat: loop . DOT

    DOT  shift, and go to state 57


State 45

   24 stat: assign . DOT

    DOT  shift, and go to state 58


State 46

   25 in: SCANF LBRACK . ID RBRACK

    ID  shift, and go to state 59


State 47

   26 out: PRINTF LBRACK . expr RBRACK

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    expr  go to state 60
    N     go to state 11
    A     go to state 12
    R     go to state 13


State 48

   27 if_stat: IF LBRACK . expr RO expr RBRACK THEN block

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    expr  go to state 61
    N     go to state 11
    A     go to state 12
    R     go to state 13


State 49

   28 loop: ITER LBRACK . expr RO expr RBRACK block

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    expr  go to state 62
    N     go to state 11
    A     go to state 12
    R     go to state 13


State 50

   29 assign: ID ASSIGNS . expr

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    expr  go to state 63
    N     go to state 11
    A     go to state 12
    R     go to state 13


State 51

    2 block: RBRACE vars stats LBRACE .

    $default  reduce using rule 2 (block)


State 52

   16 stats: stat mStat .

    $default  reduce using rule 16 (stats)


State 53

   18 mStat: stat . mStat

    RBRACE  shift, and go to state 22
    SCANF   shift, and go to state 33
    PRINTF  shift, and go to state 34
    IF      shift, and go to state 35
    ITER    shift, and go to state 36
    ID      shift, and go to state 37

    $default  reduce using rule 17 (mStat)

    block    go to state 38
    mStat    go to state 64
    stat     go to state 53
    in       go to state 41
    out      go to state 42
    if_stat  go to state 43
    loop     go to state 44
    assign   go to state 45


State 54

   19 stat: in DOT .

    $default  reduce using rule 19 (stat)


State 55

   20 stat: out DOT .

    $default  reduce using rule 20 (stat)


State 56

   22 stat: if_stat DOT .

    $default  reduce using rule 22 (stat)


State 57

   23 stat: loop DOT .

    $default  reduce using rule 23 (stat)


State 58

   24 stat: assign DOT .

    $default  reduce using rule 24 (stat)


State 59

   25 in: SCANF LBRACK ID . RBRACK

    RBRACK  shift, and go to state 65


State 60

   26 out: PRINTF LBRACK expr . RBRACK

    RBRACK  shift, and go to state 66


State 61

   27 if_stat: IF LBRACK expr . RO expr RBRACK THEN block

    GE     shift, and go to state 67
    LE     shift, and go to state 68
    EQUAL  shift, and go to state 69
    COLON  shift, and go to state 70

    RO  go to state 71


State 62

   28 loop: ITER LBRACK expr . RO expr RBRACK block

    GE     shift, and go to state 67
    LE     shift, and go to state 68
    EQUAL  shift, and go to state 69
    COLON  shift, and go to state 70

    RO  go to state 72


State 63

   29 assign: ID ASSIGNS expr .

    $default  reduce using rule 29 (assign)


State 64

   18 mStat: stat mStat .

    $default  reduce using rule 18 (mStat)


State 65

   25 in: SCANF LBRACK ID RBRACK .

    $default  reduce using rule 25 (in)


State 66

   26 out: PRINTF LBRACK expr RBRACK .

    $default  reduce using rule 26 (out)


State 67

   31 RO: GE .

    $default  reduce using rule 31 (RO)


State 68

   30 RO: LE .

    $default  reduce using rule 30 (RO)


State 69

   32 RO: EQUAL .

    $default  reduce using rule 32 (RO)


State 70

   33 RO: COLON . COLON

    COLON  shift, and go to state 73


State 71

   27 if_stat: IF LBRACK expr RO . expr RBRACK THEN block

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    expr  go to state 74
    N     go to state 11
    A     go to state 12
    R     go to state 13


State 72

   28 loop: ITER LBRACK expr RO . expr RBRACK block

    LBRACK  shift, and go to state 6
    MOD     shift, and go to state 7
    NUMBER  shift, and go to state 8
    ID      shift, and go to state 9

    expr  go to state 75
    N     go to state 11
    A     go to state 12
    R     go to state 13


State 73

   33 RO: COLON COLON .

    $default  reduce using rule 33 (RO)


State 74

   27 if_stat: IF LBRACK expr RO expr . RBRACK THEN block

    RBRACK  shift, and go to state 76


State 75

   28 loop: ITER LBRACK expr RO expr . RBRACK block

    RBRACK  shift, and go to state 77


State 76

   27 if_stat: IF LBRACK expr RO expr RBRACK . THEN block

    THEN  shift, and go to state 78


State 77

   28 loop: ITER LBRACK expr RO expr RBRACK . block

    RBRACE  shift, and go to state 22

    block  go to state 79


State 78

   27 if_stat: IF LBRACK expr RO expr RBRACK THEN . block

    RBRACE  shift, and go to state 22

    block  go to state 80


State 79

   28 loop: ITER LBRACK expr RO expr RBRACK block .

    $default  reduce using rule 28 (loop)


State 80

   27 if_stat: IF LBRACK expr RO expr RBRACK THEN block .

    $default  reduce using rule 27 (if_stat)
